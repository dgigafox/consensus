/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface VotingMachineContract
  extends Truffle.Contract<VotingMachineInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<VotingMachineInstance>;
}

export interface CandidateCreated {
  name: "CandidateCreated";
  args: {
    candidateId: string;
    0: string;
  };
}

export interface CandidateVoted {
  name: "CandidateVoted";
  args: {
    candidateId: string;
    voter: string;
    0: string;
    1: string;
  };
}

type AllEvents = CandidateCreated | CandidateVoted;

export interface VotingMachineInstance extends Truffle.ContractInstance {
  candidates(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  voters(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  votes(
    arg0: string,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  randomId(
    _name: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  createCandidate: {
    (_name: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_name: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getCandidateName(
    _id: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  vote: {
    (_id: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_id: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _id: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _id: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getVotes(
    _id: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  methods: {
    candidates(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    voters(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    votes(
      arg0: string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    randomId(
      _name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    createCandidate: {
      (_name: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _name: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _name: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _name: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getCandidateName(
      _id: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    vote: {
      (_id: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(_id: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        _id: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _id: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getVotes(
      _id: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
